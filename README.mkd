# üéâ CloudFlare DDNS in Go

This is a reimplementation of [timothymiller/cloudflare-ddns](https://github.com/timothymiller/cloudflare-ddns) with several improvements.

## üöß Status of the Project

The code is working well for me, but the repository is still young and the design is subject to changes. The compatible mode, however, is intended to track the latest configuration format used by [timothymiller/cloudflare-ddns](https://github.com/timothymiller/cloudflare-ddns).

## üëè Notable Improvements

1. **It will _not_ delete any `A` or `AAAA` records** unless the domains are explicitly listed. The way the original program handles stale records has surprised many people; see [timothymiller/cloudflare-ddns#52](https://github.com/timothymiller/cloudflare-ddns/pull/52) and [#57](https://github.com/timothymiller/cloudflare-ddns/pull/57), for example. This will never happen in the new implementation.
2. It is mainly **configured via environment variables,** which means all the settings can go into `.env` when using `docker-compose`. This immediately solves [timothymiller/cloudflare-ddns#35](https://github.com/timothymiller/cloudflare-ddns/pull/35) and [#41](https://github.com/timothymiller/cloudflare-ddns/pull/41).
3. It can also be a **drop-in replacement**. See below.
4. It _will_ respect `PGID` and `PUID` and **drop the root privilege immediately.**
5. It can take fully qualified domain names and **find the correct zones IDs for you.**
6. It can be configured to obtain IP addresses **using local network interfaces**, solving [#36](https://github.com/timothymiller/cloudflare-ddns/issues/36).
7. It comes with **many technical improvements under the hood,** such as handling of pagination in the CloudFlare API (thanks to the official Go binding [cloudflare/cloudflare-go](https://github.com/cloudflare/cloudflare-go)), (still incomplete) timeout mechanism, in-memory caching (thanks to [patrickmn/go-cache](https://github.com/patrickmn/go-cache)), etc.

As a bonus, the implementation has a tiny footprint and **its Docker images are only of size about 5 MBs.** (The Docker image of the original CloudFlare-DDNS is also small, but this one is even smaller.)

## üõ°Ô∏è Privacy and Security

The new implementation delivers the same privacy guarantee---it uses the same CloudFlare API to determine the public IP addresses. Moreover, it drops the root privilege immediately. That said, it does have a few external library dependencies:
1. [patrickmn/go-cache](https://github.com/patrickmn/go-cache) for in-memory caching to reduce API usage.
2. [cloudflare/cloudflare-go](https://github.com/cloudflare/cloudflare-go) as the official Go library for CloudFlare API v4.

## üõ†Ô∏è Setup with Docker Compose

### ü§ù Compatible Mode

Use this option if you already have a working JSON configuration for CloudFlare-DDNS and wish to keep it.

#### ü•æ Migration Step 1: Updating `docker-compose.yml`

1. Change `timothyjmiller/cloudflare-ddns:latest` to `ghcr.io/favonia/cloudflare-ddns-go:latest`.
2. Add `COMPATIBLE=true` to `environment`.

Here is a possible configuration after the migration:

```yaml
version: "3"
services:
  cloudflare-ddns-go:
    image: ghcr.io/favonia/cloudflare-ddns-go:latest
    security_opt:
      - no-new-privileges:true
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - COMPATIBLE=true
    volumes:
      - ${PWD}/cloudflare-ddns/config.json:/config.json
```

‚ö†Ô∏è You should not need automatic restart (_e.g.,_ `restart: unless-stopped`) because the program should exit only when non-recoverable errors happen or when you manually stop it. Please consider reporting the bug if it exits for any other reasons.

‚ö†Ô∏è If you have a custom container name (_e.g.,_ `container_name: cloudflare-ddns`), it is recommended to change it so that Docker Compose will not be confused.

‚ö†Ô∏è The item `network_mode: host` is for IPv6. If you wish to keep the network separated from the host network, check out the proper way to [enable IPv6 support](https://docs.docker.com/config/daemon/ipv6/).

The new tool should be up and running after running
```bash
docker-compose pull cloudflare-ddns-go
docker-compose up --detach --remove-orphans --build cloudflare-ddns-go
```
(The `--remove-orphans` option is to remove the original CloudFlare-DDNS.) However, you might wish to follow the next step to customize it further.

#### ü•æ Migration Step 2: Further Customization

The compatible mode recognizes the following environment variables:

| Name | Valid Values | Meaning | Required? | Default Value |
| ---- | ------------ | ------- | --------- | ------------- |
| `COMPATIBLE` | Boolean | Whether the program should mimic the original CloudFlare-DDNS. | Must be set to `true` to use the compatible mode | `false`
| `PGID` | POSIX Group ID | The effective group ID the program should assume (instead of being the `root`) | No | 1000
| `PUID` | POSIX User ID | The effective user ID the program should assume (instead of being the `root`) | No | 1000
| `QUIET` | Boolean | Whether the program should reduce the logging | No | `false`

### üòé New Mode (Using Environment Variables)

Use the new mode if compatibility with CloudFlare-DDNS is not your concern or you wish to try out more features. The main limitation of the new configuration format is that it only accepts one API token while you can specify multiple API tokens in the JSON compatible mode. This restriction might be lifted in the future.

#### Step 1: Updating `docker-compose.yml`

Incorporate the following fragment into your `docker-compose.yml` (or other equivalent files).

```yaml
version: "3"
services:
  cloudflare-ddns-go:
    image: ghcr.io/favonia/cloudflare-ddns-go:latest
    security_opt:
      - no-new-privileges:true
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - CF_API_TOKEN
      - DOMAINS
      - PROXIED=true
```

‚ö†Ô∏è The item `network_mode: host` is for IPv6. If you wish to keep the network separated from the host network, check out the proper way to [enable IPv6 support](https://docs.docker.com/config/daemon/ipv6/).

‚ö†Ô∏è The setting `PROXIED=true` enables CloudFlare to cache your webpages and hide your actual IP addresses. If you wish to bypass that, remove the entry `PROXIED=true`. (The default value of `PROXIED` is `false`.)

#### Step 2: Updating `.env`

You should then add these lines in your `.env` file:
```bash
CF_API_TOKEN=YOUR-CLOUDFLARE-API-TOKEN
DOMAINS=www.example.org,www2.example.org
```

- The value of `CF_API_TOKEN` should be an API **token** (_not_ API key), which can be obtained via the [API Tokens page](https://dash.cloudflare.com/profile/api-tokens). Create an API token (_not_ API key) with the **Zone - DNS - Edit** permission and copy the token into `.env`.

  ‚ö†Ô∏è The legacy API key authentication is intentionally _not_ supported by the new format. You should use the more secure API tokens even in the JSON compatible mode.

- The value of `DOMAINS` should be a list of fully qualified domain names (without the final dots) separated by commas. For example, `github.com,www.github.com`.

The new tool should be up and running after executing these commands:
```bash
docker-compose pull cloudflare-ddns-go
docker-compose up --detach --build cloudflare-ddns-go
```
However, you might wish to follow the next step to customize it further.

#### Step 3: Customization

Here are all the environment variables the program checks. Note that, in the compatible mode (`COMPATIBLE=true`), only `PUID`, `PGID`, and `QUIET` (and `COMPATIBLE` itself) are functional; other variables are ignored.

| Name | Valid Values | Meaning | Required? | Default Value |
| ---- | ------------ | ------- | --------- | ------------- |
| `CF_API_TOKEN` | CloudFlare API tokens with the `DNS:Edit` permission | The token to access the CloudFlare API | Exactly one of `CF_API_TOKEN` and `CF_API_TOKEN_FILE` should be set | N/A |
| `CF_API_TOKEN_FILE` | File paths | The path to the file that contains the token to access the CloudFlare API | Exactly one of `CF_API_TOKEN` and `CF_API_TOKEN_FILE` should be set | N/A |
| `COMPATIBLE` | Boolean | Whether the program should mimic the original CloudFlare-DDNS | Must be unset or set to `false` to use the new mode | `false`
| `DOMAINS` | Comma-separated fully qualified domain names (but without the final periods) | All the domains this tool should update | Yes, and the list cannot be empty | N/A
| `IP4_POLICY` | `cloudflare`, `local`, and `unmanaged` | `cloudflare` means getting the public IP address via CloudFlare. `local` means getting the address via local network interfaces. `unmanaged` means leaving `A` records alone. | No | `cloudflare`
| `IP6_POLICY` | `cloudflare`, `local`, and `unmanaged` | (As above, but for IPv6 and `AAAA` records) | No | `cloudflare`
| `PGID` | POSIX Group ID | The effective group ID the program should assume (instead of being the `root`) | No | 1000
| `PROXIED` | Boolean | Whether new DNS records should be proxied by CloudFlare | No | `false`
| `PUID` | POSIX User ID | The effective user ID the program should assume (instead of being the `root`) | No | 1000
| `QUIET` | Boolean | Whether the program should reduce the logging | No | `false`
| `REFRESH_INTERVAL` | Any positive time duration, with a unit, such as `1h` or `10m`. See [time.ParseDuration](https://golang.org/pkg/time/#ParseDuration) | The refresh interval for the program to re-check IPs and update DNS records (if necessary) | No | `5m`
| `TTL` | Time-to-live (TTL) values | The TTL values used to create new DNS records | No | `1` (meaning automatic)

‚ö†Ô∏è In the above table, ‚ÄúBoolean‚Äù means `1`, `t`, `T`, `TRUE`, `true`, `True`, `0`, `f`, `F`, `FALSE`, `false`, and `False`. See [strconv.ParseBool](https://golang.org/pkg/strconv/#ParseBool).

‚ö†Ô∏è When the policy is `unmanaged`, the tool will not remove records of the specified kinds (`A` records for IPv4 and `AAAA` records for IPv6). Those records are simply ignored and kept intact.

‚ö†Ô∏è You might need `network_mode: host` is for `IP4_POLICY=local` or `IP6_POLICY=local`, for otherwise the program will detect the address used by the container, not the host.

#### Alternative Setup with Docker Secret

The new mode can also work with [Docker secrets](https://docs.docker.com/engine/swarm/secrets/) if you wish to provide the API token via `docker secret`. (This advanced setup is not available to all Docker configurations.) Use `CF_API_TOKEN_FILE=/run/secrets/<secret_name>` instead of the `CF_API_TOKEN` variable to provide the token.

## üõ†Ô∏è Running without Docker Compose

At the root of the source directory, run:
```bash
go run cmd/ddns.go
```
The program does not take arguments directly. Instead, it checks the environment variables. See the above section for the detailed explanation of the environment variables.

## üíñ Questions and Contributions

Questions, feature requests, and contributions are all welcome! Consider [opening a new GitHub issue](https://github.com/favonia/cloudflare-ddns-go/issues/new) to initiate the discussion.
