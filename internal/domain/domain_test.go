package domain_test

import (
	"cmp"
	"slices"
	"testing"
	"testing/quick"

	"github.com/stretchr/testify/require"

	"github.com/favonia/cloudflare-ddns/internal/domain"
)

func TestNew(t *testing.T) {
	t.Parallel()
	type f = domain.FQDN
	type w = domain.Wildcard
	for _, tc := range [...]struct {
		input     string
		expected  domain.Domain
		ok        bool
		errString string
	}{
		{"tHe.CaPiTaL.cAsE", f("the.capital.case"), true, ""},
		// The following examples were adapted from https://unicode.org/cldr/utility/idna.jsp
		{"fass.de", f("fass.de"), true, ""},
		{"faÃŸ.de", f("xn--fa-hia.de"), true, ""},
		{"fÃ¤ÃŸ.de", f("xn--f-qfao.de"), true, ""},
		{"xn--fa-hia.de", f("xn--fa-hia.de"), true, ""},
		{"â‚¹.com", f("xn--yzg.com"), true, ""},
		{"ð‘€“.com", f("xn--n00d.com"), true, ""},
		{"\u0080.com", f("xn--a.com"), false, "idna: disallowed rune U+0080"},
		{"xn--a.com", f("xn--a.com"), false, `idna: invalid label "\u0080"`},
		{"a\u200Cb", f("xn--ab-j1t"), false, `idna: invalid label "a\u200cb"`},
		{"xn--ab-j1t", f("xn--ab-j1t"), false, `idna: invalid label "a\u200cb"`},
		{"\u00F6bb.at", f("xn--bb-eka.at"), true, ""},
		{"o\u0308bb.at", f("xn--bb-eka.at"), true, ""},
		{"\u00D6BB.at", f("xn--bb-eka.at"), true, ""},
		{"O\u0308BB.at", f("xn--bb-eka.at"), true, ""},
		{"È¡og.de", f("xn--og-09a.de"), true, ""},
		{"â˜•.de", f("xn--53h.de"), true, ""},
		{"Iâ™¥NY.de", f("xn--iny-zx5a.de"), true, ""},
		{"ï¼¡ï¼¢ï¼£ãƒ»æ—¥æœ¬.co.jp", f("xn--abc-rs4b422ycvb.co.jp"), true, ""},
		{"æ—¥æœ¬ï½¡coï½¡jp", f("xn--wgv71a.co.jp"), true, ""},
		{"æ—¥æœ¬ï½¡coï¼Žjp", f("xn--wgv71a.co.jp"), true, ""},
		{"æ—¥æœ¬â’ˆcoï¼Žjp", f("xn--co-wuw5954azlb.jp"), false, "idna: disallowed rune U+2488"},
		{"x\u0327\u0301.de", f("xn--x-xbb7i.de"), true, ""},
		{"x\u0301\u0327.de", f("xn--x-xbb7i.de"), true, ""},
		{"ÏƒÏŒÎ»Î¿Ï‚.gr", f("xn--wxaijb9b.gr"), true, ""},
		{"Î£ÏŒÎ»Î¿Ï‚.gr", f("xn--wxaijb9b.gr"), true, ""},
		{"Î£ÎŒÎ›ÎŸÎ£.grï»‹ïº®ïº‘ï»².de", f("xn--wxaikc6b.xn--gr-gtd9a1b0g.de"), false, `idna: invalid label "ÏƒÏŒÎ»Î¿Ïƒ.grØ¹Ø±Ø¨ÙŠ.de"`},
		{"Ø¹Ø±Ø¨ÙŠ.de", f("xn--ngbrx4e.de"), true, ""},
		{"Ù†Ø§Ù…Ù‡Ø§ÛŒ.de", f("xn--mgba3gch31f.de"), true, ""},
		{"Ù†Ø§Ù…Ù‡\u200CØ§ÛŒ.de", f("xn--mgba3gch31f060k.de"), true, ""},
		// wildcards
		{"*.fass.de", w("fass.de"), true, ""},
		{"*.faÃŸ.de", w("xn--fa-hia.de"), true, ""},
		{"*.fÃ¤ÃŸ.de", w("xn--f-qfao.de"), true, ""},
		{"*.xn--fa-hia.de", w("xn--fa-hia.de"), true, ""},
		{"*.â‚¹.com", w("xn--yzg.com"), true, ""},
		{"*.ð‘€“.com", w("xn--n00d.com"), true, ""},
		{"*.\u0080.com", w("xn--a.com"), false, `idna: invalid label "\u0080"`},
		{"*.xn--a.com", w("xn--a.com"), false, `idna: invalid label "\u0080"`},
		{"*.a\u200Cb", w("xn--ab-j1t"), false, `idna: invalid label "a\u200cb"`},
		{"*.xn--ab-j1t", w("xn--ab-j1t"), false, `idna: invalid label "a\u200cb"`},
		{"*.\u00F6bb.at", w("xn--bb-eka.at"), true, ""},
		{"*.o\u0308bb.at", w("xn--bb-eka.at"), true, ""},
		{"*.\u00D6BB.at", w("xn--bb-eka.at"), true, ""},
		{"*.O\u0308BB.at", w("xn--bb-eka.at"), true, ""},
		{"*.È¡og.de", w("xn--og-09a.de"), true, ""},
		{"*.â˜•.de", w("xn--53h.de"), true, ""},
		{"*.Iâ™¥NY.de", w("xn--iny-zx5a.de"), true, ""},
		{"*.ï¼¡ï¼¢ï¼£ãƒ»æ—¥æœ¬.co.jp", w("xn--abc-rs4b422ycvb.co.jp"), true, ""},
		{"*ï½¡æ—¥æœ¬ï½¡coï½¡jp", w("xn--wgv71a.co.jp"), true, ""},
		{"*ï½¡æ—¥æœ¬ï½¡coï¼Žjp", w("xn--wgv71a.co.jp"), true, ""},
		{"*ï¼Žæ—¥æœ¬ï½¡coï¼Žjp", w("xn--wgv71a.co.jp"), true, ""},
		{"*ï¼Žæ—¥æœ¬â’ˆcoï¼Žjp", w("xn--co-wuw5954azlb.jp"), false, `idna: invalid label "æ—¥æœ¬â’ˆco"`},
		{"*.x\u0327\u0301.de", w("xn--x-xbb7i.de"), true, ""},
		{"*.x\u0301\u0327.de", w("xn--x-xbb7i.de"), true, ""},
		{"*.ÏƒÏŒÎ»Î¿Ï‚.gr", w("xn--wxaijb9b.gr"), true, ""},
		{"*.Î£ÏŒÎ»Î¿Ï‚.gr", w("xn--wxaijb9b.gr"), true, ""},
		{
			"*.Î£ÎŒÎ›ÎŸÎ£.grï»‹ïº®ïº‘ï»².de", w("xn--wxaikc6b.xn--gr-gtd9a1b0g.de"),
			false,
			`idna: invalid label "xn--wxaikc6b.xn--gr-gtd9a1b0g.de"`,
		},
		{"*.Ø¹Ø±Ø¨ÙŠ.de", w("xn--ngbrx4e.de"), true, ""},
		{"*.Ù†Ø§Ù…Ù‡Ø§ÛŒ.de", w("xn--mgba3gch31f.de"), true, ""},
		{"*.Ù†Ø§Ù…Ù‡\u200CØ§ÛŒ.de", w("xn--mgba3gch31f060k.de"), true, ""},
		// some other test cases
		{"xn--a.xn--a.xn--a.com", f("xn--a.xn--a.xn--a.com"), false, `idna: invalid label "\u0080"`},
		{"a.com...ï½¡", f("a.com"), true, ""},
		{"..ï½¡..a.com", f("a.com"), true, ""},
		{"*.xn--a.xn--a.xn--a.com", w("xn--a.xn--a.xn--a.com"), false, `idna: invalid label "\u0080"`},
		{"*.a.com...ï½¡", w("a.com"), true, ""},
		{"*...ï½¡..a.com", w(".....a.com"), true, ""},
		{"*......", w(""), true, ""},
		{"*ï½¡ï½¡ï½¡ï½¡ï½¡ï½¡", w(""), true, ""},
		{"*.*.*", w("*.*"), false, `idna: disallowed rune U+002A`},
	} {
		t.Run(tc.input, func(t *testing.T) {
			t.Parallel()
			normalized, err := domain.New(tc.input)
			require.Equal(t, tc.expected, normalized)
			if tc.ok {
				require.NoError(t, err)
				require.Empty(t, tc.errString)
			} else {
				require.EqualError(t, err, tc.errString)
			}
		})
	}
}

func TestSortDomains(t *testing.T) {
	t.Parallel()

	require.NoError(t, quick.Check(
		func(fs []domain.FQDN, ws []domain.Wildcard) bool {
			merged := make([]domain.Domain, 0, len(fs)+len(ws))

			for _, f := range fs {
				merged = append(merged, f)
			}
			for _, w := range ws {
				merged = append(merged, w)
			}

			copied := make([]domain.Domain, len(merged))
			copy(copied, merged)
			domain.SortDomains(merged)

			require.ElementsMatch(t, copied, merged)
			require.True(t, slices.IsSortedFunc(merged,
				func(d1, d2 domain.Domain) int {
					return cmp.Compare(d1.DNSNameASCII(), d2.DNSNameASCII())
				}))

			return true
		},
		nil,
	))
}
