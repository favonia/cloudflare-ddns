// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/favonia/cloudflare-ddns/internal/notifier (interfaces: Notifier)
//
// Generated by this command:
//
//	mockgen -typed -destination=../mocks/mock_notifier.go -package=mocks . Notifier
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	notifier "github.com/favonia/cloudflare-ddns/internal/notifier"
	pp "github.com/favonia/cloudflare-ddns/internal/pp"
	gomock "go.uber.org/mock/gomock"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// Describe mocks base method.
func (m *MockNotifier) Describe(arg0 func(string, string) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Describe", arg0)
}

// Describe indicates an expected call of Describe.
func (mr *MockNotifierMockRecorder) Describe(arg0 any) *NotifierDescribeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockNotifier)(nil).Describe), arg0)
	return &NotifierDescribeCall{Call: call}
}

// NotifierDescribeCall wrap *gomock.Call
type NotifierDescribeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NotifierDescribeCall) Return() *NotifierDescribeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NotifierDescribeCall) Do(f func(func(string, string) bool)) *NotifierDescribeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NotifierDescribeCall) DoAndReturn(f func(func(string, string) bool)) *NotifierDescribeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Send mocks base method.
func (m *MockNotifier) Send(arg0 context.Context, arg1 pp.PP, arg2 notifier.Message) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockNotifierMockRecorder) Send(arg0, arg1, arg2 any) *NotifierSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNotifier)(nil).Send), arg0, arg1, arg2)
	return &NotifierSendCall{Call: call}
}

// NotifierSendCall wrap *gomock.Call
type NotifierSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NotifierSendCall) Return(arg0 bool) *NotifierSendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NotifierSendCall) Do(f func(context.Context, pp.PP, notifier.Message) bool) *NotifierSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NotifierSendCall) DoAndReturn(f func(context.Context, pp.PP, notifier.Message) bool) *NotifierSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
