// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/favonia/cloudflare-ddns/internal/monitor (interfaces: BasicMonitor,Monitor)
//
// Generated by this command:
//
//	mockgen -typed -destination=../mocks/mock_monitor.go -package=mocks . BasicMonitor,Monitor
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	monitor "github.com/favonia/cloudflare-ddns/internal/monitor"
	pp "github.com/favonia/cloudflare-ddns/internal/pp"
	gomock "go.uber.org/mock/gomock"
)

// MockBasicMonitor is a mock of BasicMonitor interface.
type MockBasicMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockBasicMonitorMockRecorder
}

// MockBasicMonitorMockRecorder is the mock recorder for MockBasicMonitor.
type MockBasicMonitorMockRecorder struct {
	mock *MockBasicMonitor
}

// NewMockBasicMonitor creates a new mock instance.
func NewMockBasicMonitor(ctrl *gomock.Controller) *MockBasicMonitor {
	mock := &MockBasicMonitor{ctrl: ctrl}
	mock.recorder = &MockBasicMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBasicMonitor) EXPECT() *MockBasicMonitorMockRecorder {
	return m.recorder
}

// Describe mocks base method.
func (m *MockBasicMonitor) Describe(arg0 func(string, string) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Describe", arg0)
}

// Describe indicates an expected call of Describe.
func (mr *MockBasicMonitorMockRecorder) Describe(arg0 any) *BasicMonitorDescribeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockBasicMonitor)(nil).Describe), arg0)
	return &BasicMonitorDescribeCall{Call: call}
}

// BasicMonitorDescribeCall wrap *gomock.Call
type BasicMonitorDescribeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BasicMonitorDescribeCall) Return() *BasicMonitorDescribeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BasicMonitorDescribeCall) Do(f func(func(string, string) bool)) *BasicMonitorDescribeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BasicMonitorDescribeCall) DoAndReturn(f func(func(string, string) bool)) *BasicMonitorDescribeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Ping mocks base method.
func (m *MockBasicMonitor) Ping(arg0 context.Context, arg1 pp.PP, arg2 monitor.Message) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockBasicMonitorMockRecorder) Ping(arg0, arg1, arg2 any) *BasicMonitorPingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockBasicMonitor)(nil).Ping), arg0, arg1, arg2)
	return &BasicMonitorPingCall{Call: call}
}

// BasicMonitorPingCall wrap *gomock.Call
type BasicMonitorPingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *BasicMonitorPingCall) Return(arg0 bool) *BasicMonitorPingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *BasicMonitorPingCall) Do(f func(context.Context, pp.PP, monitor.Message) bool) *BasicMonitorPingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *BasicMonitorPingCall) DoAndReturn(f func(context.Context, pp.PP, monitor.Message) bool) *BasicMonitorPingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMonitor is a mock of Monitor interface.
type MockMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorMockRecorder
}

// MockMonitorMockRecorder is the mock recorder for MockMonitor.
type MockMonitorMockRecorder struct {
	mock *MockMonitor
}

// NewMockMonitor creates a new mock instance.
func NewMockMonitor(ctrl *gomock.Controller) *MockMonitor {
	mock := &MockMonitor{ctrl: ctrl}
	mock.recorder = &MockMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitor) EXPECT() *MockMonitorMockRecorder {
	return m.recorder
}

// Describe mocks base method.
func (m *MockMonitor) Describe(arg0 func(string, string) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Describe", arg0)
}

// Describe indicates an expected call of Describe.
func (mr *MockMonitorMockRecorder) Describe(arg0 any) *MonitorDescribeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockMonitor)(nil).Describe), arg0)
	return &MonitorDescribeCall{Call: call}
}

// MonitorDescribeCall wrap *gomock.Call
type MonitorDescribeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MonitorDescribeCall) Return() *MonitorDescribeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MonitorDescribeCall) Do(f func(func(string, string) bool)) *MonitorDescribeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MonitorDescribeCall) DoAndReturn(f func(func(string, string) bool)) *MonitorDescribeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Exit mocks base method.
func (m *MockMonitor) Exit(arg0 context.Context, arg1 pp.PP, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exit", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exit indicates an expected call of Exit.
func (mr *MockMonitorMockRecorder) Exit(arg0, arg1, arg2 any) *MonitorExitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exit", reflect.TypeOf((*MockMonitor)(nil).Exit), arg0, arg1, arg2)
	return &MonitorExitCall{Call: call}
}

// MonitorExitCall wrap *gomock.Call
type MonitorExitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MonitorExitCall) Return(arg0 bool) *MonitorExitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MonitorExitCall) Do(f func(context.Context, pp.PP, string) bool) *MonitorExitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MonitorExitCall) DoAndReturn(f func(context.Context, pp.PP, string) bool) *MonitorExitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Log mocks base method.
func (m *MockMonitor) Log(arg0 context.Context, arg1 pp.PP, arg2 monitor.Message) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockMonitorMockRecorder) Log(arg0, arg1, arg2 any) *MonitorLogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockMonitor)(nil).Log), arg0, arg1, arg2)
	return &MonitorLogCall{Call: call}
}

// MonitorLogCall wrap *gomock.Call
type MonitorLogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MonitorLogCall) Return(arg0 bool) *MonitorLogCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MonitorLogCall) Do(f func(context.Context, pp.PP, monitor.Message) bool) *MonitorLogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MonitorLogCall) DoAndReturn(f func(context.Context, pp.PP, monitor.Message) bool) *MonitorLogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Ping mocks base method.
func (m *MockMonitor) Ping(arg0 context.Context, arg1 pp.PP, arg2 monitor.Message) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMonitorMockRecorder) Ping(arg0, arg1, arg2 any) *MonitorPingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMonitor)(nil).Ping), arg0, arg1, arg2)
	return &MonitorPingCall{Call: call}
}

// MonitorPingCall wrap *gomock.Call
type MonitorPingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MonitorPingCall) Return(arg0 bool) *MonitorPingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MonitorPingCall) Do(f func(context.Context, pp.PP, monitor.Message) bool) *MonitorPingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MonitorPingCall) DoAndReturn(f func(context.Context, pp.PP, monitor.Message) bool) *MonitorPingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Start mocks base method.
func (m *MockMonitor) Start(arg0 context.Context, arg1 pp.PP, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockMonitorMockRecorder) Start(arg0, arg1, arg2 any) *MonitorStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMonitor)(nil).Start), arg0, arg1, arg2)
	return &MonitorStartCall{Call: call}
}

// MonitorStartCall wrap *gomock.Call
type MonitorStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MonitorStartCall) Return(arg0 bool) *MonitorStartCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MonitorStartCall) Do(f func(context.Context, pp.PP, string) bool) *MonitorStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MonitorStartCall) DoAndReturn(f func(context.Context, pp.PP, string) bool) *MonitorStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
