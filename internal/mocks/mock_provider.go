// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/favonia/cloudflare-ddns/internal/provider (interfaces: Provider,SplitProvider)
//
// Generated by this command:
//
//	mockgen -typed -destination=../mocks/mock_provider.go -package=mocks . Provider,SplitProvider
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	netip "net/netip"
	reflect "reflect"

	ipnet "github.com/favonia/cloudflare-ddns/internal/ipnet"
	pp "github.com/favonia/cloudflare-ddns/internal/pp"
	protocol "github.com/favonia/cloudflare-ddns/internal/provider/protocol"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetIP mocks base method.
func (m *MockProvider) GetIP(arg0 context.Context, arg1 pp.PP, arg2 ipnet.Type) (netip.Addr, protocol.Method, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIP", arg0, arg1, arg2)
	ret0, _ := ret[0].(netip.Addr)
	ret1, _ := ret[1].(protocol.Method)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// GetIP indicates an expected call of GetIP.
func (mr *MockProviderMockRecorder) GetIP(arg0, arg1, arg2 any) *ProviderGetIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIP", reflect.TypeOf((*MockProvider)(nil).GetIP), arg0, arg1, arg2)
	return &ProviderGetIPCall{Call: call}
}

// ProviderGetIPCall wrap *gomock.Call
type ProviderGetIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProviderGetIPCall) Return(arg0 netip.Addr, arg1 protocol.Method, arg2 bool) *ProviderGetIPCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProviderGetIPCall) Do(f func(context.Context, pp.PP, ipnet.Type) (netip.Addr, protocol.Method, bool)) *ProviderGetIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProviderGetIPCall) DoAndReturn(f func(context.Context, pp.PP, ipnet.Type) (netip.Addr, protocol.Method, bool)) *ProviderGetIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockProvider) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockProviderMockRecorder) Name() *ProviderNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockProvider)(nil).Name))
	return &ProviderNameCall{Call: call}
}

// ProviderNameCall wrap *gomock.Call
type ProviderNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProviderNameCall) Return(arg0 string) *ProviderNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProviderNameCall) Do(f func() string) *ProviderNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProviderNameCall) DoAndReturn(f func() string) *ProviderNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSplitProvider is a mock of SplitProvider interface.
type MockSplitProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSplitProviderMockRecorder
}

// MockSplitProviderMockRecorder is the mock recorder for MockSplitProvider.
type MockSplitProviderMockRecorder struct {
	mock *MockSplitProvider
}

// NewMockSplitProvider creates a new mock instance.
func NewMockSplitProvider(ctrl *gomock.Controller) *MockSplitProvider {
	mock := &MockSplitProvider{ctrl: ctrl}
	mock.recorder = &MockSplitProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSplitProvider) EXPECT() *MockSplitProviderMockRecorder {
	return m.recorder
}

// GetIP mocks base method.
func (m *MockSplitProvider) GetIP(arg0 context.Context, arg1 pp.PP, arg2 ipnet.Type, arg3 protocol.Method) (netip.Addr, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIP", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(netip.Addr)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetIP indicates an expected call of GetIP.
func (mr *MockSplitProviderMockRecorder) GetIP(arg0, arg1, arg2, arg3 any) *SplitProviderGetIPCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIP", reflect.TypeOf((*MockSplitProvider)(nil).GetIP), arg0, arg1, arg2, arg3)
	return &SplitProviderGetIPCall{Call: call}
}

// SplitProviderGetIPCall wrap *gomock.Call
type SplitProviderGetIPCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SplitProviderGetIPCall) Return(arg0 netip.Addr, arg1 bool) *SplitProviderGetIPCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SplitProviderGetIPCall) Do(f func(context.Context, pp.PP, ipnet.Type, protocol.Method) (netip.Addr, bool)) *SplitProviderGetIPCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SplitProviderGetIPCall) DoAndReturn(f func(context.Context, pp.PP, ipnet.Type, protocol.Method) (netip.Addr, bool)) *SplitProviderGetIPCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasAlternative mocks base method.
func (m *MockSplitProvider) HasAlternative(arg0 ipnet.Type) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAlternative", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasAlternative indicates an expected call of HasAlternative.
func (mr *MockSplitProviderMockRecorder) HasAlternative(arg0 any) *SplitProviderHasAlternativeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAlternative", reflect.TypeOf((*MockSplitProvider)(nil).HasAlternative), arg0)
	return &SplitProviderHasAlternativeCall{Call: call}
}

// SplitProviderHasAlternativeCall wrap *gomock.Call
type SplitProviderHasAlternativeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SplitProviderHasAlternativeCall) Return(arg0 bool) *SplitProviderHasAlternativeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SplitProviderHasAlternativeCall) Do(f func(ipnet.Type) bool) *SplitProviderHasAlternativeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SplitProviderHasAlternativeCall) DoAndReturn(f func(ipnet.Type) bool) *SplitProviderHasAlternativeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Name mocks base method.
func (m *MockSplitProvider) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSplitProviderMockRecorder) Name() *SplitProviderNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSplitProvider)(nil).Name))
	return &SplitProviderNameCall{Call: call}
}

// SplitProviderNameCall wrap *gomock.Call
type SplitProviderNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SplitProviderNameCall) Return(arg0 string) *SplitProviderNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SplitProviderNameCall) Do(f func() string) *SplitProviderNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SplitProviderNameCall) DoAndReturn(f func() string) *SplitProviderNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
