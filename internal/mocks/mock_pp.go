// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/favonia/cloudflare-ddns/internal/pp (interfaces: PP)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	pp "github.com/favonia/cloudflare-ddns/internal/pp"
	gomock "github.com/golang/mock/gomock"
)

// MockPP is a mock of PP interface.
type MockPP struct {
	ctrl     *gomock.Controller
	recorder *MockPPMockRecorder
}

// MockPPMockRecorder is the mock recorder for MockPP.
type MockPPMockRecorder struct {
	mock *MockPP
}

// NewMockPP creates a new mock instance.
func NewMockPP(ctrl *gomock.Controller) *MockPP {
	mock := &MockPP{ctrl: ctrl}
	mock.recorder = &MockPPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPP) EXPECT() *MockPPMockRecorder {
	return m.recorder
}

// Errorf mocks base method.
func (m *MockPP) Errorf(arg0 pp.Emoji, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockPPMockRecorder) Errorf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockPP)(nil).Errorf), varargs...)
}

// IncIndent mocks base method.
func (m *MockPP) IncIndent() pp.PP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncIndent")
	ret0, _ := ret[0].(pp.PP)
	return ret0
}

// IncIndent indicates an expected call of IncIndent.
func (mr *MockPPMockRecorder) IncIndent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncIndent", reflect.TypeOf((*MockPP)(nil).IncIndent))
}

// Infof mocks base method.
func (m *MockPP) Infof(arg0 pp.Emoji, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockPPMockRecorder) Infof(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockPP)(nil).Infof), varargs...)
}

// IsEnabledFor mocks base method.
func (m *MockPP) IsEnabledFor(arg0 pp.Level) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabledFor", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabledFor indicates an expected call of IsEnabledFor.
func (mr *MockPPMockRecorder) IsEnabledFor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabledFor", reflect.TypeOf((*MockPP)(nil).IsEnabledFor), arg0)
}

// Noticef mocks base method.
func (m *MockPP) Noticef(arg0 pp.Emoji, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Noticef", varargs...)
}

// Noticef indicates an expected call of Noticef.
func (mr *MockPPMockRecorder) Noticef(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Noticef", reflect.TypeOf((*MockPP)(nil).Noticef), varargs...)
}

// SetEmoji mocks base method.
func (m *MockPP) SetEmoji(arg0 bool) pp.PP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEmoji", arg0)
	ret0, _ := ret[0].(pp.PP)
	return ret0
}

// SetEmoji indicates an expected call of SetEmoji.
func (mr *MockPPMockRecorder) SetEmoji(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEmoji", reflect.TypeOf((*MockPP)(nil).SetEmoji), arg0)
}

// SetLevel mocks base method.
func (m *MockPP) SetLevel(arg0 pp.Level) pp.PP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLevel", arg0)
	ret0, _ := ret[0].(pp.PP)
	return ret0
}

// SetLevel indicates an expected call of SetLevel.
func (mr *MockPPMockRecorder) SetLevel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel", reflect.TypeOf((*MockPP)(nil).SetLevel), arg0)
}

// Warningf mocks base method.
func (m *MockPP) Warningf(arg0 pp.Emoji, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warningf", varargs...)
}

// Warningf indicates an expected call of Warningf.
func (mr *MockPPMockRecorder) Warningf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warningf", reflect.TypeOf((*MockPP)(nil).Warningf), varargs...)
}
